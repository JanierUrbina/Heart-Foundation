// <auto-generated />
using System;
using Heart_Foundation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Heart_Foundation.Migrations
{
    [DbContext(typeof(HeartDBContext))]
    partial class HeartDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.Cuentas", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("cuentas", "seguridad");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.Roles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roles", "seguridad");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.Usuarios", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("usuarios", "seguridad");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Etapa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<int>("EstadoEtapa")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdSolicitud")
                        .HasColumnType("bigint")
                        .HasColumnName("idsolicitud");

                    b.Property<int>("IdentificadorEtapa")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdSolicitud");

                    b.ToTable("etapa", "solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Expediente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<string>("ExtencionnFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdSolicitud")
                        .HasColumnType("bigint")
                        .HasColumnName("idsolicitud");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UbicacionFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdSolicitud");

                    b.ToTable("expediente", "solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Institucion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AreaEmpresa")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UbicacionFileLogo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("institucion", "solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Nota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaHoraMensje")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdEtapa")
                        .HasColumnType("bigint")
                        .HasColumnName("idetapa");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoNota")
                        .HasColumnType("integer");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdEtapa");

                    b.ToTable("nota", "solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Representante", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("representante", "solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Solicitud", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<int>("EstadoSolicitud")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroSolicitud")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("idpersona")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("solicitud", "solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.SolicitudXRepresentante", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdRepresentante")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSolicitud")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdRepresentante");

                    b.HasIndex("IdSolicitud");

                    b.ToTable("solicituxrepresentante", "solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.SolicitudUsuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroTelefonico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SolicitudUsuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roleclaims", "seguridad");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("claims", "seguridad");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("usuario_roles", "seguridad");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.Claims", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("Claims");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.UsuarioRol", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("UsuarioRol");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.Cuentas", b =>
                {
                    b.HasOne("Heart_Foundation.Models.seguridad.Usuarios", "Usuarios")
                        .WithMany("Cuentas")
                        .HasForeignKey("LoginProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Etapa", b =>
                {
                    b.HasOne("Heart_Foundation.Models.Solicitudes.Solicitud", "Solicitud")
                        .WithMany("Etapas")
                        .HasForeignKey("IdSolicitud")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Expediente", b =>
                {
                    b.HasOne("Heart_Foundation.Models.Solicitudes.Solicitud", "Solicitud")
                        .WithMany("Expedientes")
                        .HasForeignKey("IdSolicitud")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Nota", b =>
                {
                    b.HasOne("Heart_Foundation.Models.Solicitudes.Etapa", "Etapa")
                        .WithMany("Notas")
                        .HasForeignKey("IdEtapa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etapa");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Representante", b =>
                {
                    b.HasOne("Heart_Foundation.Models.Solicitudes.Institucion", "Institucion")
                        .WithOne("Representante")
                        .HasForeignKey("Heart_Foundation.Models.Solicitudes.Representante", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institucion");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.SolicitudXRepresentante", b =>
                {
                    b.HasOne("Heart_Foundation.Models.Solicitudes.Representante", "Representante")
                        .WithMany()
                        .HasForeignKey("IdRepresentante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heart_Foundation.Models.Solicitudes.Solicitud", "Solicitud")
                        .WithMany()
                        .HasForeignKey("IdSolicitud")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Representante");

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.Claims", b =>
                {
                    b.HasOne("Heart_Foundation.Models.seguridad.Usuarios", "Usuarios")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.UsuarioRol", b =>
                {
                    b.HasOne("Heart_Foundation.Models.seguridad.Roles", "Roles")
                        .WithMany("UsuarioRols")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heart_Foundation.Models.seguridad.Usuarios", "Usuarios")
                        .WithMany("UsuarioRols")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.Roles", b =>
                {
                    b.Navigation("UsuarioRols");
                });

            modelBuilder.Entity("Heart_Foundation.Models.seguridad.Usuarios", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Cuentas");

                    b.Navigation("UsuarioRols");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Etapa", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Institucion", b =>
                {
                    b.Navigation("Representante")
                        .IsRequired();
                });

            modelBuilder.Entity("Heart_Foundation.Models.Solicitudes.Solicitud", b =>
                {
                    b.Navigation("Etapas");

                    b.Navigation("Expedientes");
                });
#pragma warning restore 612, 618
        }
    }
}
